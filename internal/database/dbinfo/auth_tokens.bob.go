// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var AuthTokens = Table[
	authTokenColumns,
	authTokenIndexes,
	authTokenForeignKeys,
	authTokenUniques,
	authTokenChecks,
]{
	Schema: "",
	Name:   "auth_tokens",
	Columns: authTokenColumns{
		ID: column{
			Name:      "id",
			DBType:    "bigint",
			Default:   "nextval('auth_tokens_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "bigint",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Type: column{
			Name:      "type",
			DBType:    "public.auth_token_types",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Token: column{
			Name:      "token",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ExpireAt: column{
			Name:      "expire_at",
			DBType:    "timestamp with time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		UpdatedAt: column{
			Name:      "updated_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		SessionID: column{
			Name:      "session_id",
			DBType:    "uuid",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: authTokenIndexes{
		AuthTokensPkey: index{
			Type: "btree",
			Name: "auth_tokens_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "auth_tokens_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: authTokenForeignKeys{
		AuthTokensAuthTokensUserIDFkey: foreignKey{
			constraint: constraint{
				Name:    "auth_tokens.auth_tokens_user_id_fkey",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "users",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type authTokenColumns struct {
	ID        column
	UserID    column
	Type      column
	Token     column
	ExpireAt  column
	CreatedAt column
	UpdatedAt column
	SessionID column
}

func (c authTokenColumns) AsSlice() []column {
	return []column{
		c.ID, c.UserID, c.Type, c.Token, c.ExpireAt, c.CreatedAt, c.UpdatedAt, c.SessionID,
	}
}

type authTokenIndexes struct {
	AuthTokensPkey index
}

func (i authTokenIndexes) AsSlice() []index {
	return []index{
		i.AuthTokensPkey,
	}
}

type authTokenForeignKeys struct {
	AuthTokensAuthTokensUserIDFkey foreignKey
}

func (f authTokenForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.AuthTokensAuthTokensUserIDFkey,
	}
}

type authTokenUniques struct{}

func (u authTokenUniques) AsSlice() []constraint {
	return []constraint{}
}

type authTokenChecks struct{}

func (c authTokenChecks) AsSlice() []check {
	return []check{}
}
