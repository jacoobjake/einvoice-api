// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var FailedLogins = Table[
	failedLoginColumns,
	failedLoginIndexes,
	failedLoginForeignKeys,
	failedLoginUniques,
	failedLoginChecks,
]{
	Schema: "",
	Name:   "failed_logins",
	Columns: failedLoginColumns{
		ID: column{
			Name:      "id",
			DBType:    "bigint",
			Default:   "nextval('failed_logins_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		IPAddress: column{
			Name:      "ip_address",
			DBType:    "inet",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		AttemptedAt: column{
			Name:      "attempted_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: failedLoginIndexes{
		FailedLoginsPkey: index{
			Type: "btree",
			Name: "failed_logins_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "failed_logins_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: failedLoginForeignKeys{
		FailedLoginsFailedLoginsUserIDFkey: foreignKey{
			constraint: constraint{
				Name:    "failed_logins.failed_logins_user_id_fkey",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "users",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type failedLoginColumns struct {
	ID          column
	UserID      column
	IPAddress   column
	AttemptedAt column
}

func (c failedLoginColumns) AsSlice() []column {
	return []column{
		c.ID, c.UserID, c.IPAddress, c.AttemptedAt,
	}
}

type failedLoginIndexes struct {
	FailedLoginsPkey index
}

func (i failedLoginIndexes) AsSlice() []index {
	return []index{
		i.FailedLoginsPkey,
	}
}

type failedLoginForeignKeys struct {
	FailedLoginsFailedLoginsUserIDFkey foreignKey
}

func (f failedLoginForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.FailedLoginsFailedLoginsUserIDFkey,
	}
}

type failedLoginUniques struct{}

func (u failedLoginUniques) AsSlice() []constraint {
	return []constraint{}
}

type failedLoginChecks struct{}

func (c failedLoginChecks) AsSlice() []check {
	return []check{}
}
