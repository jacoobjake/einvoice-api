// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package enums

import (
	"database/sql/driver"
	"fmt"
)

// Enum values for UserStatus
const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
)

func AllUserStatus() []UserStatus {
	return []UserStatus{
		UserStatusActive,
		UserStatusInactive,
		UserStatusSuspended,
	}
}

type UserStatus string

func (e UserStatus) String() string {
	return string(e)
}

func (e UserStatus) Valid() bool {
	switch e {
	case UserStatusActive,
		UserStatusInactive,
		UserStatusSuspended:
		return true
	default:
		return false
	}
}

// useful when testing in other packages
func (e UserStatus) All() []UserStatus {
	return AllUserStatus()
}

func (e UserStatus) MarshalText() ([]byte, error) {
	return []byte(e), nil
}

func (e *UserStatus) UnmarshalText(text []byte) error {
	return e.Scan(text)
}

func (e UserStatus) MarshalBinary() ([]byte, error) {
	return []byte(e), nil
}

func (e *UserStatus) UnmarshalBinary(data []byte) error {
	return e.Scan(data)
}

func (e UserStatus) Value() (driver.Value, error) {
	return string(e), nil
}

func (e *UserStatus) Scan(value any) error {
	switch x := value.(type) {
	case string:
		*e = UserStatus(x)
	case []byte:
		*e = UserStatus(x)
	case nil:
		return fmt.Errorf("cannot nil into UserStatus")
	default:
		return fmt.Errorf("cannot scan type %T: %v", value, value)
	}

	if !e.Valid() {
		return fmt.Errorf("invalid UserStatus value: %s", *e)
	}

	return nil
}
