// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	enums "github.com/jacoobjake/einvoice-api/internal/database/enums"
	models "github.com/jacoobjake/einvoice-api/internal/database/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type AuthTokenMod interface {
	Apply(context.Context, *AuthTokenTemplate)
}

type AuthTokenModFunc func(context.Context, *AuthTokenTemplate)

func (f AuthTokenModFunc) Apply(ctx context.Context, n *AuthTokenTemplate) {
	f(ctx, n)
}

type AuthTokenModSlice []AuthTokenMod

func (mods AuthTokenModSlice) Apply(ctx context.Context, n *AuthTokenTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// AuthTokenTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AuthTokenTemplate struct {
	ID        func() int64
	UserID    func() int64
	Type      func() enums.AuthTokenTypes
	Token     func() string
	ExpireAt  func() null.Val[time.Time]
	CreatedAt func() null.Val[time.Time]
	UpdatedAt func() null.Val[time.Time]

	r authTokenR
	f *Factory

	alreadyPersisted bool
}

type authTokenR struct {
	User *authTokenRUserR
}

type authTokenRUserR struct {
	o *UserTemplate
}

// Apply mods to the AuthTokenTemplate
func (o *AuthTokenTemplate) Apply(ctx context.Context, mods ...AuthTokenMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.AuthToken
// according to the relationships in the template. Nothing is inserted into the db
func (t AuthTokenTemplate) setModelRels(o *models.AuthToken) {
	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.AuthTokens = append(rel.R.AuthTokens, o)
		o.UserID = rel.ID // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.AuthTokenSetter
// this does nothing with the relationship templates
func (o AuthTokenTemplate) BuildSetter() *models.AuthTokenSetter {
	m := &models.AuthTokenSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = omit.From(val)
	}
	if o.Type != nil {
		val := o.Type()
		m.Type = omit.From(val)
	}
	if o.Token != nil {
		val := o.Token()
		m.Token = omit.From(val)
	}
	if o.ExpireAt != nil {
		val := o.ExpireAt()
		m.ExpireAt = omitnull.FromNull(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omitnull.FromNull(val)
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = omitnull.FromNull(val)
	}

	return m
}

// BuildManySetter returns an []*models.AuthTokenSetter
// this does nothing with the relationship templates
func (o AuthTokenTemplate) BuildManySetter(number int) []*models.AuthTokenSetter {
	m := make([]*models.AuthTokenSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.AuthToken
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AuthTokenTemplate.Create
func (o AuthTokenTemplate) Build() *models.AuthToken {
	m := &models.AuthToken{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Token != nil {
		m.Token = o.Token()
	}
	if o.ExpireAt != nil {
		m.ExpireAt = o.ExpireAt()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AuthTokenSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AuthTokenTemplate.CreateMany
func (o AuthTokenTemplate) BuildMany(number int) models.AuthTokenSlice {
	m := make(models.AuthTokenSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAuthToken(m *models.AuthTokenSetter) {
	if !(m.UserID.IsValue()) {
		val := random_int64(nil)
		m.UserID = omit.From(val)
	}
	if !(m.Type.IsValue()) {
		val := random_enums_AuthTokenTypes(nil)
		m.Type = omit.From(val)
	}
	if !(m.Token.IsValue()) {
		val := random_string(nil, "255")
		m.Token = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.AuthToken
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AuthTokenTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.AuthToken) error {
	var err error

	return err
}

// Create builds a authToken and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AuthTokenTemplate) Create(ctx context.Context, exec bob.Executor) (*models.AuthToken, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAuthToken(opt)

	if o.r.User == nil {
		AuthTokenMods.WithNewUser().Apply(ctx, o)
	}

	var rel0 *models.User

	if o.r.User.o.alreadyPersisted {
		rel0 = o.r.User.o.Build()
	} else {
		rel0, err = o.r.User.o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	opt.UserID = omit.From(rel0.ID)

	m, err := models.AuthTokens.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	m.R.User = rel0

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a authToken and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *AuthTokenTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.AuthToken {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a authToken and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *AuthTokenTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.AuthToken {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple authTokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AuthTokenTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AuthTokenSlice, error) {
	var err error
	m := make(models.AuthTokenSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple authTokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o AuthTokenTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.AuthTokenSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple authTokens and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o AuthTokenTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.AuthTokenSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// AuthToken has methods that act as mods for the AuthTokenTemplate
var AuthTokenMods authTokenMods

type authTokenMods struct{}

func (m authTokenMods) RandomizeAllColumns(f *faker.Faker) AuthTokenMod {
	return AuthTokenModSlice{
		AuthTokenMods.RandomID(f),
		AuthTokenMods.RandomUserID(f),
		AuthTokenMods.RandomType(f),
		AuthTokenMods.RandomToken(f),
		AuthTokenMods.RandomExpireAt(f),
		AuthTokenMods.RandomCreatedAt(f),
		AuthTokenMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m authTokenMods) ID(val int64) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) IDFunc(f func() int64) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetID() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authTokenMods) RandomID(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m authTokenMods) UserID(val int64) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) UserIDFunc(f func() int64) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetUserID() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authTokenMods) RandomUserID(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m authTokenMods) Type(val enums.AuthTokenTypes) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Type = func() enums.AuthTokenTypes { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) TypeFunc(f func() enums.AuthTokenTypes) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetType() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authTokenMods) RandomType(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Type = func() enums.AuthTokenTypes {
			return random_enums_AuthTokenTypes(f)
		}
	})
}

// Set the model columns to this value
func (m authTokenMods) Token(val string) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Token = func() string { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) TokenFunc(f func() string) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Token = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetToken() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Token = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authTokenMods) RandomToken(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.Token = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m authTokenMods) ExpireAt(val null.Val[time.Time]) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ExpireAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) ExpireAtFunc(f func() null.Val[time.Time]) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ExpireAt = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetExpireAt() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ExpireAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m authTokenMods) RandomExpireAt(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ExpireAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m authTokenMods) RandomExpireAtNotNull(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.ExpireAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m authTokenMods) CreatedAt(val null.Val[time.Time]) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.CreatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) CreatedAtFunc(f func() null.Val[time.Time]) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetCreatedAt() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m authTokenMods) RandomCreatedAt(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m authTokenMods) RandomCreatedAtNotNull(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m authTokenMods) UpdatedAt(val null.Val[time.Time]) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m authTokenMods) UpdatedAtFunc(f func() null.Val[time.Time]) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m authTokenMods) UnsetUpdatedAt() AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m authTokenMods) RandomUpdatedAt(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m authTokenMods) RandomUpdatedAtNotNull(f *faker.Faker) AuthTokenMod {
	return AuthTokenModFunc(func(_ context.Context, o *AuthTokenTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

func (m authTokenMods) WithParentsCascading() AuthTokenMod {
	return AuthTokenModFunc(func(ctx context.Context, o *AuthTokenTemplate) {
		if isDone, _ := authTokenWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = authTokenWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUserWithContext(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m authTokenMods) WithUser(rel *UserTemplate) AuthTokenMod {
	return AuthTokenModFunc(func(ctx context.Context, o *AuthTokenTemplate) {
		o.r.User = &authTokenRUserR{
			o: rel,
		}
	})
}

func (m authTokenMods) WithNewUser(mods ...UserMod) AuthTokenMod {
	return AuthTokenModFunc(func(ctx context.Context, o *AuthTokenTemplate) {
		related := o.f.NewUserWithContext(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m authTokenMods) WithExistingUser(em *models.User) AuthTokenMod {
	return AuthTokenModFunc(func(ctx context.Context, o *AuthTokenTemplate) {
		o.r.User = &authTokenRUserR{
			o: o.f.FromExistingUser(em),
		}
	})
}

func (m authTokenMods) WithoutUser() AuthTokenMod {
	return AuthTokenModFunc(func(ctx context.Context, o *AuthTokenTemplate) {
		o.r.User = nil
	})
}
