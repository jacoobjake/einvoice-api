// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import "context"

type contextKey string

var (
	// Relationship Contexts for auth_tokens
	authTokenWithParentsCascadingCtx = newContextual[bool]("authTokenWithParentsCascading")
	authTokenRelUserCtx              = newContextual[bool]("auth_tokens.users.auth_tokens.auth_tokens_user_id_fkey")

	// Relationship Contexts for failed_logins
	failedLoginWithParentsCascadingCtx = newContextual[bool]("failedLoginWithParentsCascading")
	failedLoginRelUserCtx              = newContextual[bool]("failed_logins.users.failed_logins.failed_logins_user_id_fkey")

	// Relationship Contexts for users
	userWithParentsCascadingCtx = newContextual[bool]("userWithParentsCascading")
	userRelAuthTokensCtx        = newContextual[bool]("auth_tokens.users.auth_tokens.auth_tokens_user_id_fkey")
	userRelFailedLoginsCtx      = newContextual[bool]("failed_logins.users.failed_logins.failed_logins_user_id_fkey")
)

// Contextual is a convienience wrapper around context.WithValue and context.Value
type contextual[V any] struct {
	key contextKey
}

func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}
