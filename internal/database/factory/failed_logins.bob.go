// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	models "github.com/jacoobjake/einvoice-api/internal/database/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types/pgtypes"
)

type FailedLoginMod interface {
	Apply(context.Context, *FailedLoginTemplate)
}

type FailedLoginModFunc func(context.Context, *FailedLoginTemplate)

func (f FailedLoginModFunc) Apply(ctx context.Context, n *FailedLoginTemplate) {
	f(ctx, n)
}

type FailedLoginModSlice []FailedLoginMod

func (mods FailedLoginModSlice) Apply(ctx context.Context, n *FailedLoginTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// FailedLoginTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type FailedLoginTemplate struct {
	ID          func() int64
	UserID      func() null.Val[int64]
	IPAddress   func() pgtypes.Inet
	AttemptedAt func() null.Val[time.Time]

	r failedLoginR
	f *Factory

	alreadyPersisted bool
}

type failedLoginR struct {
	User *failedLoginRUserR
}

type failedLoginRUserR struct {
	o *UserTemplate
}

// Apply mods to the FailedLoginTemplate
func (o *FailedLoginTemplate) Apply(ctx context.Context, mods ...FailedLoginMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.FailedLogin
// according to the relationships in the template. Nothing is inserted into the db
func (t FailedLoginTemplate) setModelRels(o *models.FailedLogin) {
	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.FailedLogins = append(rel.R.FailedLogins, o)
		o.UserID = null.From(rel.ID) // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.FailedLoginSetter
// this does nothing with the relationship templates
func (o FailedLoginTemplate) BuildSetter() *models.FailedLoginSetter {
	m := &models.FailedLoginSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = omitnull.FromNull(val)
	}
	if o.IPAddress != nil {
		val := o.IPAddress()
		m.IPAddress = omit.From(val)
	}
	if o.AttemptedAt != nil {
		val := o.AttemptedAt()
		m.AttemptedAt = omitnull.FromNull(val)
	}

	return m
}

// BuildManySetter returns an []*models.FailedLoginSetter
// this does nothing with the relationship templates
func (o FailedLoginTemplate) BuildManySetter(number int) []*models.FailedLoginSetter {
	m := make([]*models.FailedLoginSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.FailedLogin
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FailedLoginTemplate.Create
func (o FailedLoginTemplate) Build() *models.FailedLogin {
	m := &models.FailedLogin{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.IPAddress != nil {
		m.IPAddress = o.IPAddress()
	}
	if o.AttemptedAt != nil {
		m.AttemptedAt = o.AttemptedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.FailedLoginSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FailedLoginTemplate.CreateMany
func (o FailedLoginTemplate) BuildMany(number int) models.FailedLoginSlice {
	m := make(models.FailedLoginSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableFailedLogin(m *models.FailedLoginSetter) {
	if !(m.IPAddress.IsValue()) {
		val := random_pgtypes_Inet(nil)
		m.IPAddress = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.FailedLogin
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *FailedLoginTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.FailedLogin) error {
	var err error

	isUserDone, _ := failedLoginRelUserCtx.Value(ctx)
	if !isUserDone && o.r.User != nil {
		ctx = failedLoginRelUserCtx.WithValue(ctx, true)
		if o.r.User.o.alreadyPersisted {
			m.R.User = o.r.User.o.Build()
		} else {
			var rel0 *models.User
			rel0, err = o.r.User.o.Create(ctx, exec)
			if err != nil {
				return err
			}
			err = m.AttachUser(ctx, exec, rel0)
			if err != nil {
				return err
			}
		}

	}

	return err
}

// Create builds a failedLogin and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *FailedLoginTemplate) Create(ctx context.Context, exec bob.Executor) (*models.FailedLogin, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableFailedLogin(opt)

	m, err := models.FailedLogins.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a failedLogin and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *FailedLoginTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.FailedLogin {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a failedLogin and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *FailedLoginTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.FailedLogin {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple failedLogins and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o FailedLoginTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.FailedLoginSlice, error) {
	var err error
	m := make(models.FailedLoginSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple failedLogins and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o FailedLoginTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.FailedLoginSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple failedLogins and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o FailedLoginTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.FailedLoginSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// FailedLogin has methods that act as mods for the FailedLoginTemplate
var FailedLoginMods failedLoginMods

type failedLoginMods struct{}

func (m failedLoginMods) RandomizeAllColumns(f *faker.Faker) FailedLoginMod {
	return FailedLoginModSlice{
		FailedLoginMods.RandomID(f),
		FailedLoginMods.RandomUserID(f),
		FailedLoginMods.RandomIPAddress(f),
		FailedLoginMods.RandomAttemptedAt(f),
	}
}

// Set the model columns to this value
func (m failedLoginMods) ID(val int64) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m failedLoginMods) IDFunc(f func() int64) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m failedLoginMods) UnsetID() FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m failedLoginMods) RandomID(f *faker.Faker) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m failedLoginMods) UserID(val null.Val[int64]) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.UserID = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m failedLoginMods) UserIDFunc(f func() null.Val[int64]) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m failedLoginMods) UnsetUserID() FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m failedLoginMods) RandomUserID(f *faker.Faker) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.UserID = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m failedLoginMods) RandomUserIDNotNull(f *faker.Faker) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.UserID = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m failedLoginMods) IPAddress(val pgtypes.Inet) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.IPAddress = func() pgtypes.Inet { return val }
	})
}

// Set the Column from the function
func (m failedLoginMods) IPAddressFunc(f func() pgtypes.Inet) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.IPAddress = f
	})
}

// Clear any values for the column
func (m failedLoginMods) UnsetIPAddress() FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.IPAddress = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m failedLoginMods) RandomIPAddress(f *faker.Faker) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.IPAddress = func() pgtypes.Inet {
			return random_pgtypes_Inet(f)
		}
	})
}

// Set the model columns to this value
func (m failedLoginMods) AttemptedAt(val null.Val[time.Time]) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.AttemptedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m failedLoginMods) AttemptedAtFunc(f func() null.Val[time.Time]) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.AttemptedAt = f
	})
}

// Clear any values for the column
func (m failedLoginMods) UnsetAttemptedAt() FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.AttemptedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m failedLoginMods) RandomAttemptedAt(f *faker.Faker) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.AttemptedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m failedLoginMods) RandomAttemptedAtNotNull(f *faker.Faker) FailedLoginMod {
	return FailedLoginModFunc(func(_ context.Context, o *FailedLoginTemplate) {
		o.AttemptedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

func (m failedLoginMods) WithParentsCascading() FailedLoginMod {
	return FailedLoginModFunc(func(ctx context.Context, o *FailedLoginTemplate) {
		if isDone, _ := failedLoginWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = failedLoginWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUserWithContext(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m failedLoginMods) WithUser(rel *UserTemplate) FailedLoginMod {
	return FailedLoginModFunc(func(ctx context.Context, o *FailedLoginTemplate) {
		o.r.User = &failedLoginRUserR{
			o: rel,
		}
	})
}

func (m failedLoginMods) WithNewUser(mods ...UserMod) FailedLoginMod {
	return FailedLoginModFunc(func(ctx context.Context, o *FailedLoginTemplate) {
		related := o.f.NewUserWithContext(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m failedLoginMods) WithExistingUser(em *models.User) FailedLoginMod {
	return FailedLoginModFunc(func(ctx context.Context, o *FailedLoginTemplate) {
		o.r.User = &failedLoginRUserR{
			o: o.f.FromExistingUser(em),
		}
	})
}

func (m failedLoginMods) WithoutUser() FailedLoginMod {
	return FailedLoginModFunc(func(ctx context.Context, o *FailedLoginTemplate) {
		o.r.User = nil
	})
}
