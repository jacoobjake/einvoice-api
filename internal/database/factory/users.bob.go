// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	enums "github.com/jacoobjake/einvoice-api/internal/database/enums"
	models "github.com/jacoobjake/einvoice-api/internal/database/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(context.Context, *UserTemplate)
}

type UserModFunc func(context.Context, *UserTemplate)

func (f UserModFunc) Apply(ctx context.Context, n *UserTemplate) {
	f(ctx, n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(ctx context.Context, n *UserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID              func() int64
	FirstName       func() string
	LastName        func() string
	Password        func() string
	Email           func() string
	EmailVerifiedAt func() null.Val[time.Time]
	Status          func() enums.UserStatuses
	CreatedAt       func() null.Val[time.Time]
	UpdatedAt       func() null.Val[time.Time]
	DeletedAt       func() null.Val[time.Time]

	r userR
	f *Factory

	alreadyPersisted bool
}

type userR struct {
	AuthTokens   []*userRAuthTokensR
	FailedLogins []*userRFailedLoginsR
}

type userRAuthTokensR struct {
	number int
	o      *AuthTokenTemplate
}
type userRFailedLoginsR struct {
	number int
	o      *FailedLoginTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(ctx context.Context, mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.AuthTokens != nil {
		rel := models.AuthTokenSlice{}
		for _, r := range t.r.AuthTokens {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserID = o.ID // h2
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.AuthTokens = rel
	}

	if t.r.FailedLogins != nil {
		rel := models.FailedLoginSlice{}
		for _, r := range t.r.FailedLogins {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserID = o.ID // h2
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.FailedLogins = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.FirstName != nil {
		val := o.FirstName()
		m.FirstName = omit.From(val)
	}
	if o.LastName != nil {
		val := o.LastName()
		m.LastName = omit.From(val)
	}
	if o.Password != nil {
		val := o.Password()
		m.Password = omit.From(val)
	}
	if o.Email != nil {
		val := o.Email()
		m.Email = omit.From(val)
	}
	if o.EmailVerifiedAt != nil {
		val := o.EmailVerifiedAt()
		m.EmailVerifiedAt = omitnull.FromNull(val)
	}
	if o.Status != nil {
		val := o.Status()
		m.Status = omit.From(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omitnull.FromNull(val)
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = omitnull.FromNull(val)
	}
	if o.DeletedAt != nil {
		val := o.DeletedAt()
		m.DeletedAt = omitnull.FromNull(val)
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.FirstName != nil {
		m.FirstName = o.FirstName()
	}
	if o.LastName != nil {
		m.LastName = o.LastName()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.EmailVerifiedAt != nil {
		m.EmailVerifiedAt = o.EmailVerifiedAt()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if !(m.FirstName.IsValue()) {
		val := random_string(nil, "50")
		m.FirstName = omit.From(val)
	}
	if !(m.LastName.IsValue()) {
		val := random_string(nil, "50")
		m.LastName = omit.From(val)
	}
	if !(m.Password.IsValue()) {
		val := random_string(nil, "255")
		m.Password = omit.From(val)
	}
	if !(m.Email.IsValue()) {
		val := random_string(nil, "300")
		m.Email = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) error {
	var err error

	isAuthTokensDone, _ := userRelAuthTokensCtx.Value(ctx)
	if !isAuthTokensDone && o.r.AuthTokens != nil {
		ctx = userRelAuthTokensCtx.WithValue(ctx, true)
		for _, r := range o.r.AuthTokens {
			if r.o.alreadyPersisted {
				m.R.AuthTokens = append(m.R.AuthTokens, r.o.Build())
			} else {
				rel0, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachAuthTokens(ctx, exec, rel0...)
				if err != nil {
					return err
				}
			}
		}
	}

	isFailedLoginsDone, _ := userRelFailedLoginsCtx.Value(ctx)
	if !isFailedLoginsDone && o.r.FailedLogins != nil {
		ctx = userRelFailedLoginsCtx.WithValue(ctx, true)
		for _, r := range o.r.FailedLogins {
			if r.o.alreadyPersisted {
				m.R.FailedLogins = append(m.R.FailedLogins, r.o.Build())
			} else {
				rel1, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachFailedLogins(ctx, exec, rel1...)
				if err != nil {
					return err
				}
			}
		}
	}

	return err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomFirstName(f),
		UserMods.RandomLastName(f),
		UserMods.RandomPassword(f),
		UserMods.RandomEmail(f),
		UserMods.RandomEmailVerifiedAt(f),
		UserMods.RandomStatus(f),
		UserMods.RandomCreatedAt(f),
		UserMods.RandomUpdatedAt(f),
		UserMods.RandomDeletedAt(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() int64) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) FirstName(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FirstName = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) FirstNameFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FirstName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetFirstName() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FirstName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomFirstName(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.FirstName = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m userMods) LastName(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastName = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) LastNameFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetLastName() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomLastName(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.LastName = func() string {
			return random_string(f, "50")
		}
	})
}

// Set the model columns to this value
func (m userMods) Password(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) PasswordFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m userMods) UnsetPassword() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomPassword(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Password = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m userMods) Email(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmail() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomEmail(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Email = func() string {
			return random_string(f, "300")
		}
	})
}

// Set the model columns to this value
func (m userMods) EmailVerifiedAt(val null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.EmailVerifiedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailVerifiedAtFunc(f func() null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.EmailVerifiedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmailVerifiedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.EmailVerifiedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomEmailVerifiedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.EmailVerifiedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomEmailVerifiedAtNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.EmailVerifiedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) Status(val enums.UserStatuses) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Status = func() enums.UserStatuses { return val }
	})
}

// Set the Column from the function
func (m userMods) StatusFunc(f func() enums.UserStatuses) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m userMods) UnsetStatus() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomStatus(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Status = func() enums.UserStatuses {
			return random_enums_UserStatuses(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) CreatedAt(val null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) CreatedAtFunc(f func() null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetCreatedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomCreatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomCreatedAtNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) UpdatedAt(val null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) UpdatedAtFunc(f func() null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUpdatedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomUpdatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomUpdatedAtNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) DeletedAt(val null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) DeletedAtFunc(f func() null.Val[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetDeletedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomDeletedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomDeletedAtNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

func (m userMods) WithParentsCascading() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		if isDone, _ := userWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m userMods) WithAuthTokens(number int, related *AuthTokenTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.AuthTokens = []*userRAuthTokensR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewAuthTokens(number int, mods ...AuthTokenMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewAuthTokenWithContext(ctx, mods...)
		m.WithAuthTokens(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddAuthTokens(number int, related *AuthTokenTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.AuthTokens = append(o.r.AuthTokens, &userRAuthTokensR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewAuthTokens(number int, mods ...AuthTokenMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewAuthTokenWithContext(ctx, mods...)
		m.AddAuthTokens(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingAuthTokens(existingModels ...*models.AuthToken) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.AuthTokens = append(o.r.AuthTokens, &userRAuthTokensR{
				o: o.f.FromExistingAuthToken(em),
			})
		}
	})
}

func (m userMods) WithoutAuthTokens() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.AuthTokens = nil
	})
}

func (m userMods) WithFailedLogins(number int, related *FailedLoginTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.FailedLogins = []*userRFailedLoginsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewFailedLogins(number int, mods ...FailedLoginMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewFailedLoginWithContext(ctx, mods...)
		m.WithFailedLogins(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddFailedLogins(number int, related *FailedLoginTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.FailedLogins = append(o.r.FailedLogins, &userRFailedLoginsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewFailedLogins(number int, mods ...FailedLoginMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewFailedLoginWithContext(ctx, mods...)
		m.AddFailedLogins(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingFailedLogins(existingModels ...*models.FailedLogin) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.FailedLogins = append(o.r.FailedLogins, &userRFailedLoginsR{
				o: o.f.FromExistingFailedLogin(em),
			})
		}
	})
}

func (m userMods) WithoutFailedLogins() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.FailedLogins = nil
	})
}
