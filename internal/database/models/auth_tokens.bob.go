// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/gofrs/uuid/v5"
	enums "github.com/jacoobjake/einvoice-api/internal/database/enums"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// AuthToken is an object representing the database table.
type AuthToken struct {
	ID        int64                `db:"id,pk" `
	UserID    int64                `db:"user_id" `
	Type      enums.AuthTokenTypes `db:"type" `
	Token     string               `db:"token" `
	ExpireAt  null.Val[time.Time]  `db:"expire_at" `
	CreatedAt null.Val[time.Time]  `db:"created_at" `
	UpdatedAt null.Val[time.Time]  `db:"updated_at" `
	SessionID null.Val[uuid.UUID]  `db:"session_id" `

	R authTokenR `db:"-" `
}

// AuthTokenSlice is an alias for a slice of pointers to AuthToken.
// This should almost always be used instead of []*AuthToken.
type AuthTokenSlice []*AuthToken

// AuthTokens contains methods to work with the auth_tokens table
var AuthTokens = psql.NewTablex[*AuthToken, AuthTokenSlice, *AuthTokenSetter]("", "auth_tokens", buildAuthTokenColumns("auth_tokens"))

// AuthTokensQuery is a query on the auth_tokens table
type AuthTokensQuery = *psql.ViewQuery[*AuthToken, AuthTokenSlice]

// authTokenR is where relationships are stored.
type authTokenR struct {
	User *User // auth_tokens.auth_tokens_user_id_fkey
}

func buildAuthTokenColumns(alias string) authTokenColumns {
	return authTokenColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "user_id", "type", "token", "expire_at", "created_at", "updated_at", "session_id",
		).WithParent("auth_tokens"),
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		UserID:     psql.Quote(alias, "user_id"),
		Type:       psql.Quote(alias, "type"),
		Token:      psql.Quote(alias, "token"),
		ExpireAt:   psql.Quote(alias, "expire_at"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
		SessionID:  psql.Quote(alias, "session_id"),
	}
}

type authTokenColumns struct {
	expr.ColumnsExpr
	tableAlias string
	ID         psql.Expression
	UserID     psql.Expression
	Type       psql.Expression
	Token      psql.Expression
	ExpireAt   psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
	SessionID  psql.Expression
}

func (c authTokenColumns) Alias() string {
	return c.tableAlias
}

func (authTokenColumns) AliasedAs(alias string) authTokenColumns {
	return buildAuthTokenColumns(alias)
}

// AuthTokenSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AuthTokenSetter struct {
	ID        omit.Val[int64]                `db:"id,pk" `
	UserID    omit.Val[int64]                `db:"user_id" `
	Type      omit.Val[enums.AuthTokenTypes] `db:"type" `
	Token     omit.Val[string]               `db:"token" `
	ExpireAt  omitnull.Val[time.Time]        `db:"expire_at" `
	CreatedAt omitnull.Val[time.Time]        `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time]        `db:"updated_at" `
	SessionID omitnull.Val[uuid.UUID]        `db:"session_id" `
}

func (s AuthTokenSetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.UserID.IsValue() {
		vals = append(vals, "user_id")
	}
	if s.Type.IsValue() {
		vals = append(vals, "type")
	}
	if s.Token.IsValue() {
		vals = append(vals, "token")
	}
	if !s.ExpireAt.IsUnset() {
		vals = append(vals, "expire_at")
	}
	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}
	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}
	if !s.SessionID.IsUnset() {
		vals = append(vals, "session_id")
	}
	return vals
}

func (s AuthTokenSetter) Overwrite(t *AuthToken) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.UserID.IsValue() {
		t.UserID = s.UserID.MustGet()
	}
	if s.Type.IsValue() {
		t.Type = s.Type.MustGet()
	}
	if s.Token.IsValue() {
		t.Token = s.Token.MustGet()
	}
	if !s.ExpireAt.IsUnset() {
		t.ExpireAt = s.ExpireAt.MustGetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt = s.CreatedAt.MustGetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt = s.UpdatedAt.MustGetNull()
	}
	if !s.SessionID.IsUnset() {
		t.SessionID = s.SessionID.MustGetNull()
	}
}

func (s *AuthTokenSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return AuthTokens.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 8)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.UserID.IsValue() {
			vals[1] = psql.Arg(s.UserID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Type.IsValue() {
			vals[2] = psql.Arg(s.Type.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Token.IsValue() {
			vals[3] = psql.Arg(s.Token.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.ExpireAt.IsUnset() {
			vals[4] = psql.Arg(s.ExpireAt.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.CreatedAt.IsUnset() {
			vals[5] = psql.Arg(s.CreatedAt.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.UpdatedAt.IsUnset() {
			vals[6] = psql.Arg(s.UpdatedAt.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.SessionID.IsUnset() {
			vals[7] = psql.Arg(s.SessionID.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s AuthTokenSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s AuthTokenSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 8)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.UserID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if s.Type.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if s.Token.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "token")...),
			psql.Arg(s.Token),
		}})
	}

	if !s.ExpireAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expire_at")...),
			psql.Arg(s.ExpireAt),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	if !s.SessionID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "session_id")...),
			psql.Arg(s.SessionID),
		}})
	}

	return exprs
}

// FindAuthToken retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAuthToken(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*AuthToken, error) {
	if len(cols) == 0 {
		return AuthTokens.Query(
			sm.Where(AuthTokens.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return AuthTokens.Query(
		sm.Where(AuthTokens.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(AuthTokens.Columns.Only(cols...)),
	).One(ctx, exec)
}

// AuthTokenExists checks the presence of a single record by primary key
func AuthTokenExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return AuthTokens.Query(
		sm.Where(AuthTokens.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after AuthToken is retrieved from the database
func (o *AuthToken) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AuthTokens.AfterSelectHooks.RunHooks(ctx, exec, AuthTokenSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = AuthTokens.AfterInsertHooks.RunHooks(ctx, exec, AuthTokenSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = AuthTokens.AfterUpdateHooks.RunHooks(ctx, exec, AuthTokenSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = AuthTokens.AfterDeleteHooks.RunHooks(ctx, exec, AuthTokenSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the AuthToken
func (o *AuthToken) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *AuthToken) pkEQ() dialect.Expression {
	return psql.Quote("auth_tokens", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the AuthToken
func (o *AuthToken) Update(ctx context.Context, exec bob.Executor, s *AuthTokenSetter) error {
	v, err := AuthTokens.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single AuthToken record with an executor
func (o *AuthToken) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := AuthTokens.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the AuthToken using the executor
func (o *AuthToken) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AuthTokens.Query(
		sm.Where(AuthTokens.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after AuthTokenSlice is retrieved from the database
func (o AuthTokenSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = AuthTokens.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = AuthTokens.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = AuthTokens.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = AuthTokens.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o AuthTokenSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("auth_tokens", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o AuthTokenSlice) copyMatchingRows(from ...*AuthToken) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o AuthTokenSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AuthTokens.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AuthToken:
				o.copyMatchingRows(retrieved)
			case []*AuthToken:
				o.copyMatchingRows(retrieved...)
			case AuthTokenSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AuthToken or a slice of AuthToken
				// then run the AfterUpdateHooks on the slice
				_, err = AuthTokens.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o AuthTokenSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return AuthTokens.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *AuthToken:
				o.copyMatchingRows(retrieved)
			case []*AuthToken:
				o.copyMatchingRows(retrieved...)
			case AuthTokenSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a AuthToken or a slice of AuthToken
				// then run the AfterDeleteHooks on the slice
				_, err = AuthTokens.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o AuthTokenSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AuthTokenSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AuthTokens.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o AuthTokenSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := AuthTokens.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o AuthTokenSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := AuthTokens.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// User starts a query for related objects on users
func (o *AuthToken) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os AuthTokenSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[int64], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkUserID = append(pkUserID, o.UserID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachAuthTokenUser0(ctx context.Context, exec bob.Executor, count int, authToken0 *AuthToken, user1 *User) (*AuthToken, error) {
	setter := &AuthTokenSetter{
		UserID: omit.From(user1.ID),
	}

	err := authToken0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachAuthTokenUser0: %w", err)
	}

	return authToken0, nil
}

func (authToken0 *AuthToken) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	var err error

	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachAuthTokenUser0(ctx, exec, 1, authToken0, user1)
	if err != nil {
		return err
	}

	authToken0.R.User = user1

	user1.R.AuthTokens = append(user1.R.AuthTokens, authToken0)

	return nil
}

func (authToken0 *AuthToken) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachAuthTokenUser0(ctx, exec, 1, authToken0, user1)
	if err != nil {
		return err
	}

	authToken0.R.User = user1

	user1.R.AuthTokens = append(user1.R.AuthTokens, authToken0)

	return nil
}

type authTokenWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int64]
	UserID    psql.WhereMod[Q, int64]
	Type      psql.WhereMod[Q, enums.AuthTokenTypes]
	Token     psql.WhereMod[Q, string]
	ExpireAt  psql.WhereNullMod[Q, time.Time]
	CreatedAt psql.WhereNullMod[Q, time.Time]
	UpdatedAt psql.WhereNullMod[Q, time.Time]
	SessionID psql.WhereNullMod[Q, uuid.UUID]
}

func (authTokenWhere[Q]) AliasedAs(alias string) authTokenWhere[Q] {
	return buildAuthTokenWhere[Q](buildAuthTokenColumns(alias))
}

func buildAuthTokenWhere[Q psql.Filterable](cols authTokenColumns) authTokenWhere[Q] {
	return authTokenWhere[Q]{
		ID:        psql.Where[Q, int64](cols.ID),
		UserID:    psql.Where[Q, int64](cols.UserID),
		Type:      psql.Where[Q, enums.AuthTokenTypes](cols.Type),
		Token:     psql.Where[Q, string](cols.Token),
		ExpireAt:  psql.WhereNull[Q, time.Time](cols.ExpireAt),
		CreatedAt: psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.WhereNull[Q, time.Time](cols.UpdatedAt),
		SessionID: psql.WhereNull[Q, uuid.UUID](cols.SessionID),
	}
}

func (o *AuthToken) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("authToken cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.AuthTokens = AuthTokenSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("authToken has no relationship %q", name)
	}
}

type authTokenPreloader struct {
	User func(...psql.PreloadOption) psql.Preloader
}

func buildAuthTokenPreloader() authTokenPreloader {
	return authTokenPreloader{
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](psql.PreloadRel{
				Name: "User",
				Sides: []psql.PreloadSide{
					{
						From:        AuthTokens,
						To:          Users,
						FromColumns: []string{"user_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Users.Columns.Names(), opts...)
		},
	}
}

type authTokenThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildAuthTokenThenLoader[Q orm.Loadable]() authTokenThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return authTokenThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the authToken's User into the .R struct
func (o *AuthToken) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AuthTokens = AuthTokenSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the authToken's User into the .R struct
func (os AuthTokenSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range users {

			if !(o.UserID == rel.ID) {
				continue
			}

			rel.R.AuthTokens = append(rel.R.AuthTokens, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

type authTokenJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j authTokenJoins[Q]) aliasedAs(alias string) authTokenJoins[Q] {
	return buildAuthTokenJoins[Q](buildAuthTokenColumns(alias), j.typ)
}

func buildAuthTokenJoins[Q dialect.Joinable](cols authTokenColumns, typ string) authTokenJoins[Q] {
	return authTokenJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: Users.Columns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}
