// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// FailedLogin is an object representing the database table.
type FailedLogin struct {
	ID          int64               `db:"id,pk" `
	UserID      int64               `db:"user_id" `
	IPAddress   pgtypes.Inet        `db:"ip_address" `
	AttemptedAt null.Val[time.Time] `db:"attempted_at" `

	R failedLoginR `db:"-" `
}

// FailedLoginSlice is an alias for a slice of pointers to FailedLogin.
// This should almost always be used instead of []*FailedLogin.
type FailedLoginSlice []*FailedLogin

// FailedLogins contains methods to work with the failed_logins table
var FailedLogins = psql.NewTablex[*FailedLogin, FailedLoginSlice, *FailedLoginSetter]("", "failed_logins", buildFailedLoginColumns("failed_logins"))

// FailedLoginsQuery is a query on the failed_logins table
type FailedLoginsQuery = *psql.ViewQuery[*FailedLogin, FailedLoginSlice]

// failedLoginR is where relationships are stored.
type failedLoginR struct {
	User *User // failed_logins.failed_logins_user_id_fkey
}

func buildFailedLoginColumns(alias string) failedLoginColumns {
	return failedLoginColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "user_id", "ip_address", "attempted_at",
		).WithParent("failed_logins"),
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		UserID:      psql.Quote(alias, "user_id"),
		IPAddress:   psql.Quote(alias, "ip_address"),
		AttemptedAt: psql.Quote(alias, "attempted_at"),
	}
}

type failedLoginColumns struct {
	expr.ColumnsExpr
	tableAlias  string
	ID          psql.Expression
	UserID      psql.Expression
	IPAddress   psql.Expression
	AttemptedAt psql.Expression
}

func (c failedLoginColumns) Alias() string {
	return c.tableAlias
}

func (failedLoginColumns) AliasedAs(alias string) failedLoginColumns {
	return buildFailedLoginColumns(alias)
}

// FailedLoginSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FailedLoginSetter struct {
	ID          omit.Val[int64]         `db:"id,pk" `
	UserID      omit.Val[int64]         `db:"user_id" `
	IPAddress   omit.Val[pgtypes.Inet]  `db:"ip_address" `
	AttemptedAt omitnull.Val[time.Time] `db:"attempted_at" `
}

func (s FailedLoginSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.UserID.IsValue() {
		vals = append(vals, "user_id")
	}
	if s.IPAddress.IsValue() {
		vals = append(vals, "ip_address")
	}
	if !s.AttemptedAt.IsUnset() {
		vals = append(vals, "attempted_at")
	}
	return vals
}

func (s FailedLoginSetter) Overwrite(t *FailedLogin) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.UserID.IsValue() {
		t.UserID = s.UserID.MustGet()
	}
	if s.IPAddress.IsValue() {
		t.IPAddress = s.IPAddress.MustGet()
	}
	if !s.AttemptedAt.IsUnset() {
		t.AttemptedAt = s.AttemptedAt.MustGetNull()
	}
}

func (s *FailedLoginSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FailedLogins.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.UserID.IsValue() {
			vals[1] = psql.Arg(s.UserID.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.IPAddress.IsValue() {
			vals[2] = psql.Arg(s.IPAddress.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.AttemptedAt.IsUnset() {
			vals[3] = psql.Arg(s.AttemptedAt.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FailedLoginSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FailedLoginSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.UserID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if s.IPAddress.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ip_address")...),
			psql.Arg(s.IPAddress),
		}})
	}

	if !s.AttemptedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "attempted_at")...),
			psql.Arg(s.AttemptedAt),
		}})
	}

	return exprs
}

// FindFailedLogin retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFailedLogin(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*FailedLogin, error) {
	if len(cols) == 0 {
		return FailedLogins.Query(
			sm.Where(FailedLogins.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return FailedLogins.Query(
		sm.Where(FailedLogins.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(FailedLogins.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FailedLoginExists checks the presence of a single record by primary key
func FailedLoginExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return FailedLogins.Query(
		sm.Where(FailedLogins.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FailedLogin is retrieved from the database
func (o *FailedLogin) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FailedLogins.AfterSelectHooks.RunHooks(ctx, exec, FailedLoginSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FailedLogins.AfterInsertHooks.RunHooks(ctx, exec, FailedLoginSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FailedLogins.AfterUpdateHooks.RunHooks(ctx, exec, FailedLoginSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FailedLogins.AfterDeleteHooks.RunHooks(ctx, exec, FailedLoginSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FailedLogin
func (o *FailedLogin) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *FailedLogin) pkEQ() dialect.Expression {
	return psql.Quote("failed_logins", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FailedLogin
func (o *FailedLogin) Update(ctx context.Context, exec bob.Executor, s *FailedLoginSetter) error {
	v, err := FailedLogins.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single FailedLogin record with an executor
func (o *FailedLogin) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FailedLogins.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FailedLogin using the executor
func (o *FailedLogin) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FailedLogins.Query(
		sm.Where(FailedLogins.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after FailedLoginSlice is retrieved from the database
func (o FailedLoginSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FailedLogins.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FailedLogins.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FailedLogins.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FailedLogins.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FailedLoginSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("failed_logins", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FailedLoginSlice) copyMatchingRows(from ...*FailedLogin) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FailedLoginSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FailedLogins.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FailedLogin:
				o.copyMatchingRows(retrieved)
			case []*FailedLogin:
				o.copyMatchingRows(retrieved...)
			case FailedLoginSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FailedLogin or a slice of FailedLogin
				// then run the AfterUpdateHooks on the slice
				_, err = FailedLogins.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FailedLoginSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FailedLogins.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FailedLogin:
				o.copyMatchingRows(retrieved)
			case []*FailedLogin:
				o.copyMatchingRows(retrieved...)
			case FailedLoginSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FailedLogin or a slice of FailedLogin
				// then run the AfterDeleteHooks on the slice
				_, err = FailedLogins.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FailedLoginSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FailedLoginSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FailedLogins.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FailedLoginSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FailedLogins.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FailedLoginSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FailedLogins.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// User starts a query for related objects on users
func (o *FailedLogin) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os FailedLoginSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[int64], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkUserID = append(pkUserID, o.UserID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bigint[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachFailedLoginUser0(ctx context.Context, exec bob.Executor, count int, failedLogin0 *FailedLogin, user1 *User) (*FailedLogin, error) {
	setter := &FailedLoginSetter{
		UserID: omit.From(user1.ID),
	}

	err := failedLogin0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachFailedLoginUser0: %w", err)
	}

	return failedLogin0, nil
}

func (failedLogin0 *FailedLogin) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	var err error

	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachFailedLoginUser0(ctx, exec, 1, failedLogin0, user1)
	if err != nil {
		return err
	}

	failedLogin0.R.User = user1

	user1.R.FailedLogins = append(user1.R.FailedLogins, failedLogin0)

	return nil
}

func (failedLogin0 *FailedLogin) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachFailedLoginUser0(ctx, exec, 1, failedLogin0, user1)
	if err != nil {
		return err
	}

	failedLogin0.R.User = user1

	user1.R.FailedLogins = append(user1.R.FailedLogins, failedLogin0)

	return nil
}

type failedLoginWhere[Q psql.Filterable] struct {
	ID          psql.WhereMod[Q, int64]
	UserID      psql.WhereMod[Q, int64]
	IPAddress   psql.WhereMod[Q, pgtypes.Inet]
	AttemptedAt psql.WhereNullMod[Q, time.Time]
}

func (failedLoginWhere[Q]) AliasedAs(alias string) failedLoginWhere[Q] {
	return buildFailedLoginWhere[Q](buildFailedLoginColumns(alias))
}

func buildFailedLoginWhere[Q psql.Filterable](cols failedLoginColumns) failedLoginWhere[Q] {
	return failedLoginWhere[Q]{
		ID:          psql.Where[Q, int64](cols.ID),
		UserID:      psql.Where[Q, int64](cols.UserID),
		IPAddress:   psql.Where[Q, pgtypes.Inet](cols.IPAddress),
		AttemptedAt: psql.WhereNull[Q, time.Time](cols.AttemptedAt),
	}
}

func (o *FailedLogin) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("failedLogin cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.FailedLogins = FailedLoginSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("failedLogin has no relationship %q", name)
	}
}

type failedLoginPreloader struct {
	User func(...psql.PreloadOption) psql.Preloader
}

func buildFailedLoginPreloader() failedLoginPreloader {
	return failedLoginPreloader{
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](psql.PreloadRel{
				Name: "User",
				Sides: []psql.PreloadSide{
					{
						From:        FailedLogins,
						To:          Users,
						FromColumns: []string{"user_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Users.Columns.Names(), opts...)
		},
	}
}

type failedLoginThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildFailedLoginThenLoader[Q orm.Loadable]() failedLoginThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return failedLoginThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the failedLogin's User into the .R struct
func (o *FailedLogin) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.FailedLogins = FailedLoginSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the failedLogin's User into the .R struct
func (os FailedLoginSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range users {

			if !(o.UserID == rel.ID) {
				continue
			}

			rel.R.FailedLogins = append(rel.R.FailedLogins, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

type failedLoginJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j failedLoginJoins[Q]) aliasedAs(alias string) failedLoginJoins[Q] {
	return buildFailedLoginJoins[Q](buildFailedLoginColumns(alias), j.typ)
}

func buildFailedLoginJoins[Q dialect.Joinable](cols failedLoginColumns, typ string) failedLoginJoins[Q] {
	return failedLoginJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: Users.Columns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}
