// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// User is an object representing the database table.
type User struct {
	ID              int64               `db:"id,pk" `
	FirstName       string              `db:"first_name" `
	LastName        string              `db:"last_name" `
	Password        string              `db:"password" `
	Email           string              `db:"email" `
	EmailVerifiedAt null.Val[time.Time] `db:"email_verified_at" `
	Status          string              `db:"status" `
	CreatedAt       null.Val[time.Time] `db:"created_at" `
	UpdatedAt       null.Val[time.Time] `db:"updated_at" `
	DeletedAt       null.Val[time.Time] `db:"deleted_at" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users", buildUserColumns("users"))

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	AuthTokens   AuthTokenSlice   // auth_tokens.auth_tokens_user_id_fkey
	FailedLogins FailedLoginSlice // failed_logins.failed_logins_user_id_fkey
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "first_name", "last_name", "password", "email", "email_verified_at", "status", "created_at", "updated_at", "deleted_at",
		).WithParent("users"),
		tableAlias:      alias,
		ID:              psql.Quote(alias, "id"),
		FirstName:       psql.Quote(alias, "first_name"),
		LastName:        psql.Quote(alias, "last_name"),
		Password:        psql.Quote(alias, "password"),
		Email:           psql.Quote(alias, "email"),
		EmailVerifiedAt: psql.Quote(alias, "email_verified_at"),
		Status:          psql.Quote(alias, "status"),
		CreatedAt:       psql.Quote(alias, "created_at"),
		UpdatedAt:       psql.Quote(alias, "updated_at"),
		DeletedAt:       psql.Quote(alias, "deleted_at"),
	}
}

type userColumns struct {
	expr.ColumnsExpr
	tableAlias      string
	ID              psql.Expression
	FirstName       psql.Expression
	LastName        psql.Expression
	Password        psql.Expression
	Email           psql.Expression
	EmailVerifiedAt psql.Expression
	Status          psql.Expression
	CreatedAt       psql.Expression
	UpdatedAt       psql.Expression
	DeletedAt       psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID              omit.Val[int64]         `db:"id,pk" `
	FirstName       omit.Val[string]        `db:"first_name" `
	LastName        omit.Val[string]        `db:"last_name" `
	Password        omit.Val[string]        `db:"password" `
	Email           omit.Val[string]        `db:"email" `
	EmailVerifiedAt omitnull.Val[time.Time] `db:"email_verified_at" `
	Status          omit.Val[string]        `db:"status" `
	CreatedAt       omitnull.Val[time.Time] `db:"created_at" `
	UpdatedAt       omitnull.Val[time.Time] `db:"updated_at" `
	DeletedAt       omitnull.Val[time.Time] `db:"deleted_at" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.FirstName.IsValue() {
		vals = append(vals, "first_name")
	}
	if s.LastName.IsValue() {
		vals = append(vals, "last_name")
	}
	if s.Password.IsValue() {
		vals = append(vals, "password")
	}
	if s.Email.IsValue() {
		vals = append(vals, "email")
	}
	if !s.EmailVerifiedAt.IsUnset() {
		vals = append(vals, "email_verified_at")
	}
	if s.Status.IsValue() {
		vals = append(vals, "status")
	}
	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}
	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}
	if !s.DeletedAt.IsUnset() {
		vals = append(vals, "deleted_at")
	}
	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.FirstName.IsValue() {
		t.FirstName = s.FirstName.MustGet()
	}
	if s.LastName.IsValue() {
		t.LastName = s.LastName.MustGet()
	}
	if s.Password.IsValue() {
		t.Password = s.Password.MustGet()
	}
	if s.Email.IsValue() {
		t.Email = s.Email.MustGet()
	}
	if !s.EmailVerifiedAt.IsUnset() {
		t.EmailVerifiedAt = s.EmailVerifiedAt.MustGetNull()
	}
	if s.Status.IsValue() {
		t.Status = s.Status.MustGet()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt = s.CreatedAt.MustGetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt = s.UpdatedAt.MustGetNull()
	}
	if !s.DeletedAt.IsUnset() {
		t.DeletedAt = s.DeletedAt.MustGetNull()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 10)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.FirstName.IsValue() {
			vals[1] = psql.Arg(s.FirstName.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.LastName.IsValue() {
			vals[2] = psql.Arg(s.LastName.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Password.IsValue() {
			vals[3] = psql.Arg(s.Password.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Email.IsValue() {
			vals[4] = psql.Arg(s.Email.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.EmailVerifiedAt.IsUnset() {
			vals[5] = psql.Arg(s.EmailVerifiedAt.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Status.IsValue() {
			vals[6] = psql.Arg(s.Status.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.CreatedAt.IsUnset() {
			vals[7] = psql.Arg(s.CreatedAt.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.UpdatedAt.IsUnset() {
			vals[8] = psql.Arg(s.UpdatedAt.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.DeletedAt.IsUnset() {
			vals[9] = psql.Arg(s.DeletedAt.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 10)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.FirstName.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "first_name")...),
			psql.Arg(s.FirstName),
		}})
	}

	if s.LastName.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_name")...),
			psql.Arg(s.LastName),
		}})
	}

	if s.Password.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "password")...),
			psql.Arg(s.Password),
		}})
	}

	if s.Email.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if !s.EmailVerifiedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email_verified_at")...),
			psql.Arg(s.EmailVerifiedAt),
		}})
	}

	if s.Status.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "status")...),
			psql.Arg(s.Status),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	if !s.DeletedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "deleted_at")...),
			psql.Arg(s.DeletedAt),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(Users.Columns.Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("users", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("users", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// AuthTokens starts a query for related objects on auth_tokens
func (o *User) AuthTokens(mods ...bob.Mod[*dialect.SelectQuery]) AuthTokensQuery {
	return AuthTokens.Query(append(mods,
		sm.Where(AuthTokens.Columns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) AuthTokens(mods ...bob.Mod[*dialect.SelectQuery]) AuthTokensQuery {
	pkID := make(pgtypes.Array[int64], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bigint[]")),
	))

	return AuthTokens.Query(append(mods,
		sm.Where(psql.Group(AuthTokens.Columns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// FailedLogins starts a query for related objects on failed_logins
func (o *User) FailedLogins(mods ...bob.Mod[*dialect.SelectQuery]) FailedLoginsQuery {
	return FailedLogins.Query(append(mods,
		sm.Where(FailedLogins.Columns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) FailedLogins(mods ...bob.Mod[*dialect.SelectQuery]) FailedLoginsQuery {
	pkID := make(pgtypes.Array[int64], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bigint[]")),
	))

	return FailedLogins.Query(append(mods,
		sm.Where(psql.Group(FailedLogins.Columns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func insertUserAuthTokens0(ctx context.Context, exec bob.Executor, authTokens1 []*AuthTokenSetter, user0 *User) (AuthTokenSlice, error) {
	for i := range authTokens1 {
		authTokens1[i].UserID = omitnull.From(user0.ID)
	}

	ret, err := AuthTokens.Insert(bob.ToMods(authTokens1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserAuthTokens0: %w", err)
	}

	return ret, nil
}

func attachUserAuthTokens0(ctx context.Context, exec bob.Executor, count int, authTokens1 AuthTokenSlice, user0 *User) (AuthTokenSlice, error) {
	setter := &AuthTokenSetter{
		UserID: omitnull.From(user0.ID),
	}

	err := authTokens1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserAuthTokens0: %w", err)
	}

	return authTokens1, nil
}

func (user0 *User) InsertAuthTokens(ctx context.Context, exec bob.Executor, related ...*AuthTokenSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	authTokens1, err := insertUserAuthTokens0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.AuthTokens = append(user0.R.AuthTokens, authTokens1...)

	for _, rel := range authTokens1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachAuthTokens(ctx context.Context, exec bob.Executor, related ...*AuthToken) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	authTokens1 := AuthTokenSlice(related)

	_, err = attachUserAuthTokens0(ctx, exec, len(related), authTokens1, user0)
	if err != nil {
		return err
	}

	user0.R.AuthTokens = append(user0.R.AuthTokens, authTokens1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserFailedLogins0(ctx context.Context, exec bob.Executor, failedLogins1 []*FailedLoginSetter, user0 *User) (FailedLoginSlice, error) {
	for i := range failedLogins1 {
		failedLogins1[i].UserID = omitnull.From(user0.ID)
	}

	ret, err := FailedLogins.Insert(bob.ToMods(failedLogins1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserFailedLogins0: %w", err)
	}

	return ret, nil
}

func attachUserFailedLogins0(ctx context.Context, exec bob.Executor, count int, failedLogins1 FailedLoginSlice, user0 *User) (FailedLoginSlice, error) {
	setter := &FailedLoginSetter{
		UserID: omitnull.From(user0.ID),
	}

	err := failedLogins1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserFailedLogins0: %w", err)
	}

	return failedLogins1, nil
}

func (user0 *User) InsertFailedLogins(ctx context.Context, exec bob.Executor, related ...*FailedLoginSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	failedLogins1, err := insertUserFailedLogins0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.FailedLogins = append(user0.R.FailedLogins, failedLogins1...)

	for _, rel := range failedLogins1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachFailedLogins(ctx context.Context, exec bob.Executor, related ...*FailedLogin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	failedLogins1 := FailedLoginSlice(related)

	_, err = attachUserFailedLogins0(ctx, exec, len(related), failedLogins1, user0)
	if err != nil {
		return err
	}

	user0.R.FailedLogins = append(user0.R.FailedLogins, failedLogins1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

type userWhere[Q psql.Filterable] struct {
	ID              psql.WhereMod[Q, int64]
	FirstName       psql.WhereMod[Q, string]
	LastName        psql.WhereMod[Q, string]
	Password        psql.WhereMod[Q, string]
	Email           psql.WhereMod[Q, string]
	EmailVerifiedAt psql.WhereNullMod[Q, time.Time]
	Status          psql.WhereMod[Q, string]
	CreatedAt       psql.WhereNullMod[Q, time.Time]
	UpdatedAt       psql.WhereNullMod[Q, time.Time]
	DeletedAt       psql.WhereNullMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:              psql.Where[Q, int64](cols.ID),
		FirstName:       psql.Where[Q, string](cols.FirstName),
		LastName:        psql.Where[Q, string](cols.LastName),
		Password:        psql.Where[Q, string](cols.Password),
		Email:           psql.Where[Q, string](cols.Email),
		EmailVerifiedAt: psql.WhereNull[Q, time.Time](cols.EmailVerifiedAt),
		Status:          psql.Where[Q, string](cols.Status),
		CreatedAt:       psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt:       psql.WhereNull[Q, time.Time](cols.UpdatedAt),
		DeletedAt:       psql.WhereNull[Q, time.Time](cols.DeletedAt),
	}
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AuthTokens":
		rels, ok := retrieved.(AuthTokenSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.AuthTokens = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "FailedLogins":
		rels, ok := retrieved.(FailedLoginSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.FailedLogins = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

type userPreloader struct{}

func buildUserPreloader() userPreloader {
	return userPreloader{}
}

type userThenLoader[Q orm.Loadable] struct {
	AuthTokens   func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	FailedLogins func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserThenLoader[Q orm.Loadable]() userThenLoader[Q] {
	type AuthTokensLoadInterface interface {
		LoadAuthTokens(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type FailedLoginsLoadInterface interface {
		LoadFailedLogins(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userThenLoader[Q]{
		AuthTokens: thenLoadBuilder[Q](
			"AuthTokens",
			func(ctx context.Context, exec bob.Executor, retrieved AuthTokensLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadAuthTokens(ctx, exec, mods...)
			},
		),
		FailedLogins: thenLoadBuilder[Q](
			"FailedLogins",
			func(ctx context.Context, exec bob.Executor, retrieved FailedLoginsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadFailedLogins(ctx, exec, mods...)
			},
		),
	}
}

// LoadAuthTokens loads the user's AuthTokens into the .R struct
func (o *User) LoadAuthTokens(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuthTokens = nil

	related, err := o.AuthTokens(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.AuthTokens = related
	return nil
}

// LoadAuthTokens loads the user's AuthTokens into the .R struct
func (os UserSlice) LoadAuthTokens(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	authTokens, err := os.AuthTokens(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.AuthTokens = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range authTokens {

			if !rel.UserID.IsValue() {
				continue
			}
			if !(rel.UserID.IsValue() && o.ID == rel.UserID.MustGet()) {
				continue
			}

			rel.R.User = o

			o.R.AuthTokens = append(o.R.AuthTokens, rel)
		}
	}

	return nil
}

// LoadFailedLogins loads the user's FailedLogins into the .R struct
func (o *User) LoadFailedLogins(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.FailedLogins = nil

	related, err := o.FailedLogins(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.FailedLogins = related
	return nil
}

// LoadFailedLogins loads the user's FailedLogins into the .R struct
func (os UserSlice) LoadFailedLogins(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	failedLogins, err := os.FailedLogins(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.FailedLogins = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range failedLogins {

			if !rel.UserID.IsValue() {
				continue
			}
			if !(rel.UserID.IsValue() && o.ID == rel.UserID.MustGet()) {
				continue
			}

			rel.R.User = o

			o.R.FailedLogins = append(o.R.FailedLogins, rel)
		}
	}

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ          string
	AuthTokens   modAs[Q, authTokenColumns]
	FailedLogins modAs[Q, failedLoginColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ: typ,
		AuthTokens: modAs[Q, authTokenColumns]{
			c: AuthTokens.Columns,
			f: func(to authTokenColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, AuthTokens.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		FailedLogins: modAs[Q, failedLoginColumns]{
			c: FailedLogins.Columns,
			f: func(to failedLoginColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, FailedLogins.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
